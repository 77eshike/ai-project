// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int          @id @default(autoincrement())
  email         String       @unique
  name          String?
  password      String?
  emailVerified DateTime?
  image         String?
  role          String?
  status        Boolean      @default(true)
  // 审计
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  // 关系
  accounts      Account[]
  sessions      Session[]
  files         File[]
  knowledges    Knowledge[]
  conversations Conversation[]

  @@map("users")
}

model Account {
  id                 String   @id @default(cuid())
  userId             Int
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model File {
  id        Int      @id @default(autoincrement())
  userId    Int
  filename  String
  key       String
  size      Int
  mimeType  String
  url       String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Knowledge {
  id        String   @id @default(cuid())
  title     String?
  content   String
  category  String
  tags      String
  source    String
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([category])
}

model Conversation {
  id        String   @id @default(cuid())
  title     String
  messages  Json
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  metadata  Json?    // 存储模式等信息
  
  // 关系 - 必须在字段定义之后
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("conversations")
}