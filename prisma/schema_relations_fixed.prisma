generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            Int      @id @default(autoincrement())
  email         String   @unique
  name          String?
  password      String?
  emailVerified DateTime?
  image         String?
  role          String?
  status        Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  accounts      Account[]
  sessions      Session[]
  knowledges    Knowledge[]
  ownedProjects Project[]
  projectMembers ProjectMember[]

  @@map("User")
}

model Account {
  id                String   @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("Account")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("Session")
}

model Knowledge {
  id        String   @id @default(cuid())
  title     String?
  content   String
  category  String
  tags      String
  source    String
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("Knowledge")
  @@index([userId])
  @@index([category])
}

model Project {
  id          String   @id @default(cuid())
  title       String
  description String?
  content     String?
  type        String   @default("DRAFT_PROJECT")
  status      String   @default("DRAFT")
  visibility  String   @default("PRIVATE")
  ownerId     Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  publishedAt DateTime?
  knowledgeSourceId String?
  
  owner         User           @relation(fields: [ownerId], references: [id])
  projectMembers ProjectMember[]

  @@map("projects")
}

model ProjectMember {
  id        String   @id @default(cuid())
  projectId String
  userId    Int
  role      String   @default("MEMBER")
  joinedAt  DateTime @default(now())

  project Project @relation(fields: [projectId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@unique([projectId, userId])
  @@map("project_members")
}
