// components/Utils/deviceUtils.js

/**
 * 检测设备语音支持情况
 * @returns {Object} 支持信息对象
 */
export const checkSpeechSupport = () => {
  // 检测是否在移动端
  const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
  
  // 检测语音识别支持
  const speechRecognitionSupported = !!(window.SpeechRecognition || window.webkitSpeechRecognition);
  
  // 检测语音合成支持
  const speechSynthesisSupported = 'speechSynthesis' in window;
  
  let supportLevel = 'none';
  let supported = false;
  
  if (speechRecognitionSupported) {
    if (isMobile) {
      // 移动端支持程度检测
      const isIOS = /iPhone|iPad|iPod/i.test(navigator.userAgent);
      const isAndroid = /Android/i.test(navigator.userAgent);
      
      if (isIOS) {
        // iOS 14+ 支持语音识别
        supportLevel = 'limited';
        supported = true;
      } else if (isAndroid) {
        // Android 通常有较好的支持
        supportLevel = 'good';
        supported = true;
      }
    } else {
      // 桌面端支持
      supportLevel = 'good';
      supported = true;
    }
  }
  
  return {
    supported,
    supportLevel,
    isMobile,
    speechRecognitionSupported,
    speechSynthesisSupported,
    userAgent: navigator.userAgent
  };
};

/**
 * 获取浏览器信息
 * @returns {Object} 浏览器信息
 */
export const getBrowserInfo = () => {
  const ua = navigator.userAgent;
  let browser = 'unknown';
  let version = 'unknown';
  
  // 检测 Chrome
  if (/Chrome\/([0-9]+)/.test(ua)) {
    browser = 'Chrome';
    version = ua.match(/Chrome\/([0-9]+)/)[1];
  }
  // 检测 Safari
  else if (/Safari\/([0-9]+)/.test(ua)) {
    browser = 'Safari';
    version = ua.match(/Version\/([0-9.]+)/)?.[1] || 'unknown';
  }
  // 检测 Firefox
  else if (/Firefox\/([0-9]+)/.test(ua)) {
    browser = 'Firefox';
    version = ua.match(/Firefox\/([0-9]+)/)[1];
  }
  
  return { browser, version };
};

/**
 * 检测麦克风权限状态
 * @returns {Promise<string>} 权限状态
 */
export const checkMicrophonePermission = async () => {
  try {
    if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
      return 'not-supported';
    }
    
    const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
    stream.getTracks().forEach(track => track.stop());
    return 'granted';
  } catch (error) {
    if (error.name === 'NotAllowedError' || error.name === 'PermissionDeniedError') {
      return 'denied';
    } else if (error.name === 'NotFoundError' || error.name === 'DevicesNotFoundError') {
      return 'no-microphone';
    } else {
      return 'unknown-error';
    }
  }
};

/**
 * 请求麦克风权限
 * @returns {Promise<boolean>} 是否授权成功
 */
export const requestMicrophonePermission = async () => {
  try {
    const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
    stream.getTracks().forEach(track => track.stop());
    return true;
  } catch (error) {
    console.error('麦克风权限请求失败:', error);
    return false;
  }
};

/**
 * 检测网络连接状态
 * @returns {string} 网络状态
 */
export const checkNetworkStatus = () => {
  if (navigator.connection) {
    const connection = navigator.connection;
    return {
      effectiveType: connection.effectiveType,
      downlink: connection.downlink,
      rtt: connection.rtt,
      saveData: connection.saveData
    };
  }
  return 'unknown';
};

/**
 * 检测电池状态（移动端）
 * @returns {Promise<Object>} 电池信息
 */
export const checkBatteryStatus = async () => {
  if ('getBattery' in navigator) {
    try {
      const battery = await navigator.getBattery();
      return {
        level: battery.level * 100,
        charging: battery.charging,
        chargingTime: battery.chargingTime,
        dischargingTime: battery.dischargingTime
      };
    } catch (error) {
      console.error('电池状态检测失败:', error);
    }
  }
  return { level: 'unknown', charging: 'unknown' };
};

/**
 * 综合设备检测
 * @returns {Object} 完整的设备信息
 */
export const getDeviceInfo = () => {
  if (typeof window === 'undefined') {
    return {
      isMobile: false,
      deviceType: 'desktop',
      browser: 'unknown',
      version: 'unknown',
      supported: false,
      supportLevel: 'none'
    };
  }

  const ua = navigator.userAgent;
  const isMobileUserAgent = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(ua);
  const isTouchDevice = 'ontouchstart' in window || navigator.maxTouchPoints > 0;
  const isMobileScreen = window.innerWidth < 768;
  
  const isMobile = isMobileUserAgent || (isMobileScreen && isTouchDevice);
  
  return {
    isMobile,
    deviceType: isMobile ? 'mobile' : 'desktop',
    ...getBrowserInfo(),
    ...checkSpeechSupport()
  };
};

// 保持默认导出以兼容现有代码
export default {
  getDeviceInfo,
  checkSpeechSupport,
  getBrowserInfo,
  checkMicrophonePermission,
  requestMicrophonePermission,
  checkNetworkStatus,
  checkBatteryStatus
};